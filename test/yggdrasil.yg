grammar! ygg {"*.yg","*.ygg", "*.grammar"}

// Import the predefined types,
// Otherwise the `String` type of each language will be used directly to represent the atomic expression
import! "@typedefs/literal_types.toml"

ignore! {NEWLINE, WHITESPACE, COMMENT}

// entry point
program = ^statement*

// `#` will generate named bindings for languages that do not support union type, such as rust
// Union type will be used directly in other languages that support union type, such as ts, scala
// Note that compared to ANTLR, this is not mandatory, but the same name is also forbidden.
// If not specified, a name like `AuxVariant1` will be generated.
statement =
    | grammar_statement   #GrammarStatement
    | fragment_statement  #FragmentStatement
    | include_statement   #IncludeStatement
    | ignore_statement    #IgnoreStatement
    | eos                 #EmptyStatement!

//?
//* grammar tsg
//* grammar tsg {"*.tsg", }
grammar_statement _= grammar ~ ^id ~ _grammar_exts? ~ eos?
_grammar_exts      = "{" ~ @interleave(extensions <- string, ",", trailing = true)? ~ "}"


//? `fragment` means that this file cannot build as grammar, it can only be imported.
//? `id` represents the default name when importing, which can be changed by `as`.
//* fragment ascii
fragment_statement _= _fragment ~ ^id ~ eos?


//?
//*
import_statement _=
    | import ~ (path <- string) ~ (as ^id)?         #FromPath
    | import ~ (path <- string) ~ _import_selected #FromPathItems
_import_selected  = "{" ~ @interleave(item <- import_item, ",", trailing = 1)? ~ "}"
import_item       = (id <- id) ~ as ~ (alias <- id)

//?
//* ignores /\/
//* ignores [comment, comment_inline]
ignores_statement _=
    | ignores ~ atom
    | ignores ~ "{" ~ @interleave(atom, ",", trailing = 1)? ~ "}"


expression _=
    | "(" ~ expression ~ ")"
    | _data
    | unary_suffix
    | unary_prefix
    | infix_expression
unary_suffix =
    | @unary_suffix(210, _suffix_ops, expression)
unary_prefix =
    | @unary_prefix(200, _prefix_ops, expression)
infix_expression =
    | @binary_left(40, expression, "~", expression)   #Concat
    | @binary_left(30, expression, "#", expression)   #Tag
    | @binary_left(20, expression, "|", expression)   #Or
    | @binary_left(10, expression, "<-", expression)  #Label
_prefix_ops @=
    | "^"
_suffix_ops @=
    | "?"
    | "*"
    | "+"

// `_` inline a item even if it not mark as automatic inline
data = _atom
atom =
    | id
    | string
    | unsigned
    | regex
    | macro_call



// `f(a, b)`  vs `f ~ (a | b) `
// `f!(a, b)` vs `f ~ !(a | b)`
macro_call _=
      @token("@", name <- id)
    ~ ("." ~ dot <- id)?
    ~ "(" ~ @interleave(^expression, ",", trailing = 1) ~ ")"



// Identifier
@alias(id)
@syntax_type(identifier)
identifier @= ("_" | XID_START) ~ XID_CONTINUE
// The bare 0 will be considered as the string "0"
integer    @= _sign? _unsigned
_unsigned   = 0 | [1-9] [0-9]*
_sign       = [+\-]
// string
string     @=
    | /'[^'\\]*(\\.[^'\\]*)*'/
    | /"[^"\\]*(\\.[^"\\]*)*"/
// regex
regex_long _= "/" ~ (item <- regex_item) ~ "/" ~ (mode <- regex_mode)?
regex_mode  = [gimsx]
regex_item  =
    | regex_range
    | regex_set
regex_range = (is_neg <- "[" | "[^")  ~ regex_range_item* ~ "]"
regex_range_item =
    | regex_set
    | regex_range_item_group
    | [^\]]
regex_range_item_group =
    | @binary_left(10, regex_range_item, "-", regex_range_item)
regex_set = "\\p" ~ "{" ~ (set <- [_0-9a-zA-Z]+) ~ "}"
regex_repeats _=
    | "{" ~ (repeats <- integer) ~ "}"
    | "{" ~ (least <- integer?) ~ "," ~ (most <- integer?) ~ "}"
// end of line
eos = ";"



@syntax_type(identifier)


@syntax_type(constant)
bool: bool @= "true" | "false"

//! ====================== OVERRIDE ============================

COMMENT =
    | comment_inline
    | comment_multiline
@syntax_type_hook(comment)
comment_inline = "//!"
comment_block = "//+" ~ "//-"
@syntax_type_hook()

//! ===================== HOOK AREA ============================

// All elements defined next will warp with `@token`
@define_hook(@token)
// All elements defined next will be marked as `keyword`
@syntax_type_hook(keyword)
fragment = "fragment!"
grammar  = "grammar!"
ignore   = "ignore!"
import   = "import!"
macro    = "macro!"
as       = "as"
// clean warp broadcast
@syntax_type_hook()
// clean syntax type broadcast
@define_hook()
// clean all hook
@clear_hook()

